import os
import asyncio
import logging
import re
import random
from time import monotonic
from datetime import datetime
from typing import Optional, Dict, Any, Tuple

from fastapi import FastAPI, Request, HTTPException, BackgroundTasks
import httpx
from fastapi.responses import JSONResponse

# -------------------- –õ–û–ì–ò --------------------
logger = logging.getLogger("uvicorn.error")

# -------------------- ENV ---------------------
TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]
Z_AI_API_KEY = os.environ["Z_AI_API_KEY"]
WEBHOOK_SECRET = os.environ.get("WEBHOOK_SECRET", "default_secret")

# –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å Z.AI –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
ZAI_MODEL = os.environ.get("Z_AI_MODEL", "glm-4.5-Flash")

# –ü—Ä–µ–¥–µ–ª –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –º–æ–¥–µ–ª–∏ (free-—Ç–∞—Ä–∏—Ñ –ª—é–±–∏—Ç 1‚Äì2)
ZAI_CONCURRENCY_LIMIT = int(os.environ.get("ZAI_CONCURRENCY_LIMIT", "2"))

# –ê–Ω—Ç–∏-—Å–ø–∞–º –ø–æ —á–∞—Ç—É (—Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
PER_CHAT_COOLDOWN = float(os.environ.get("PER_CHAT_COOLDOWN", "0.7"))

# –¢–∞–π–º–∞—É—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ HTTP
HTTPX_TIMEOUT = httpx.Timeout(connect=10.0, read=60.0, write=15.0, pool=60.0)

# –°—Ç–æ—Ä–æ–∂-—Ç–∞–π–º–∞—É—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –º–æ–¥–µ–ª–∏ (—Å–µ–∫)
MODEL_WATCHDOG_SECONDS = int(os.environ.get("MODEL_WATCHDOG_SECONDS", "25"))

# -------------------- APP ---------------------
app = FastAPI()
http_client: Optional[httpx.AsyncClient] = None

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –º–æ–¥–µ–ª–∏ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å ¬´–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º¬ª)
zai_semaphore = asyncio.Semaphore(ZAI_CONCURRENCY_LIMIT)
SAFE_MODE = False  # –∫–æ–≥–¥–∞ True ‚Äî —Å–µ–º–∞—Ñ–æ—Ä = 1

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —á–∞—Ç–∞–º
SESSIONS: Dict[int, Dict[str, Any]] = {}
LAST_HIT: dict[int, float] = {}

# -------------------- –¢–ï–ö–°–¢–´ –ò –ö–ù–û–ü–ö–ò ---------------------
MENU_BTN_FORMAT = "–û—Ñ–æ—Ä–º–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞"
BTN_CLEAR = "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"
BTN_MENU = "üè† –í –º–µ–Ω—é"
BTN_RESTART = "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"
BTN_FIX = "üõ† –ü–æ—á–∏–Ω–∏—Ç—å —Å–±–æ–∏"

PROMPT_ENTER_SOURCE = (
    "–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å—Ç–æ—á–Ω–∏–∫ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π (URL) –∏ –¥–∞–Ω–Ω—ã–º–∏. "
    "–ú–æ–∂–Ω–æ –ø–æ —á–∞—Å—Ç—è–º, –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ. –Ø —Å–æ–±–µ—Ä—É –∏ –æ—Ñ–æ—Ä–º–ª—é –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É."
)
CANCEL_MSG = "–†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–ª—é—á—ë–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî /menu"
HELP_MSG = (
    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –º–µ–Ω—é\n"
    "/menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
    "/cancel ‚Äî –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞\n\n"
    f"–ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é: ¬´{MENU_BTN_FORMAT}¬ª ‚Äî —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞."
)

def menu_keyboard() -> Dict[str, Any]:
    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    return {
        "keyboard": [
            [{"text": MENU_BTN_FORMAT}],
            [{"text": BTN_CLEAR}, {"text": BTN_MENU}],
            [{"text": BTN_RESTART}, {"text": BTN_FIX}],
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False,
    }

# -------------------- –ü–†–û–ú–ü–¢ –î–õ–Ø –ú–û–î–ï–õ–ò ---------------------
SYSTEM_PROMPT_FORMATTER = """
–¢—ã ‚Äî —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å—Å—ã–ª–æ–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞: –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
–≤—ã–≤–µ—Å—Ç–∏ –°–¢–†–û–ì–û –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:

(–°–°–´–õ–ö–ê '–ù–ê–ó–í–ê–ù–ò–ï // –ò–ó–î–ê–ù–ò–ï. ‚Äî –ì–û–î. ‚Äî Vol. X, No. Y. ‚Äî P. N‚ÄìM. ‚Äî DOI: Z')

–ü—Ä–∞–≤–∏–ª–∞:
1) –í–°–ï–ì–î–ê –Ω–∞—á–∏–Ω–∞–π —Å–æ —Å—Å—ã–ª–∫–∏ (URL). –ï—Å–ª–∏ –≤–æ –≤—Ö–æ–¥–µ –µ—Å—Ç—å DOI –±–µ–∑ —Å—Å—ã–ª–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: https://doi.org/<DOI>.
2) –ò–ì–ù–û–†–ò–†–£–ô –∞–≤—Ç–æ—Ä–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é (–∏—Ö –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å).
3) –í–Ω—É—Ç—Ä–∏ –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫ —É–∫–∞–∂–∏ —Å—Ç—Ä–æ–≥–æ: ¬´–ù–∞–∑–≤–∞–Ω–∏–µ // –ò–∑–¥–∞–Ω–∏–µ. ‚Äî –ì–æ–¥.¬ª
   –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–º/–≤—ã–ø—É—Å–∫/—Å—Ç—Ä–∞–Ω–∏—Ü—ã/DOI ‚Äî –¥–æ–±–∞–≤—å –∏—Ö —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ (‚Äî) –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ.
4) –ù–µ –¥–æ–±–∞–≤–ª—è–π –ù–ò–ß–ï–ì–û, –∫—Ä–æ–º–µ —ç—Ç–æ–π –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π, –∫–æ–¥–∞, –∫–∞–≤—ã—á–µ–∫ –≤–æ–∫—Ä—É–≥ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–∏ –∏ —Ç.–ø.).
5) –°–æ—Ö—Ä–∞–Ω—è–π —Ä–µ–≥–∏—Å—Ç—Ä –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è/–∂—É—Ä–Ω–∞–ª–∞ –∫–∞–∫ –≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
6) –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π. –ï—Å–ª–∏ –∫–∞–∫–æ–≥–æ-—Ç–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–∏—à–∏ –µ–≥–æ.
7) –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ URL, –Ω–∏ DOI ‚Äî –æ—Ç–≤–µ—Ç—å —Ä–æ–≤–Ω–æ: –¢—Ä–µ–±—É–µ—Ç—Å—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫.
8) –ï—Å–ª–∏ —Ç—ã –Ω–µ –≤–∏–¥–∏—à—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –∏–ª–∏ –º–µ—Å—Ç–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∏–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è, —á—Ç–æ —ç—Ç–æ –æ–Ω–æ, –ø–æ–ø—Ä–æ—Å–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ç–æ—á–Ω–∏—Ç—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–∞—Ç—å –æ—Ç–≤–µ—Ç.
""".strip()

# -------------------- –ñ–ò–ó–ù–ï–ù–ù–´–ô –¶–ò–ö–õ ---------------------
@app.on_event("startup")
async def on_startup():
    await _reinit_http_client()

@app.on_event("shutdown")
async def on_shutdown():
    global http_client
    if http_client is not None:
        await http_client.aclose()
        http_client = None

async def _reinit_http_client():
    """–ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP-–∫–ª–∏–µ–Ω—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ –∫–Ω–æ–ø–∫–æ–π ¬´–ü–æ—á–∏–Ω–∏—Ç—å —Å–±–æ–∏¬ª)."""
    global http_client
    try:
        if http_client is not None:
            await http_client.aclose()
    except Exception:
        pass
    http_client = httpx.AsyncClient(timeout=HTTPX_TIMEOUT)

def _set_safe_mode(enabled: bool):
    """–í–∫–ª/–≤—ã–∫–ª –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º (—Å–µ–º–∞—Ñ–æ—Ä –Ω–∞ 1)."""
    global SAFE_MODE, zai_semaphore
    SAFE_MODE = enabled
    limit = 1 if SAFE_MODE else ZAI_CONCURRENCY_LIMIT
    zai_semaphore = asyncio.Semaphore(limit)
    logger.warning(f"SAFE_MODE={'ON' if SAFE_MODE else 'OFF'}; concurrency={limit}")

# -------------------- TELEGRAM HELPERS ---------------------
async def tg_send_message(chat_id: int, text: str, reply_markup: Optional[dict] = None) -> Optional[int]:
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    if reply_markup:
        payload["reply_markup"] = reply_markup
    try:
        tr = await http_client.post(url, json=payload)
        if tr.is_error:
            logger.error(f"Telegram sendMessage error {tr.status_code}: {tr.text[:300]}")
            return None
        data = tr.json()
        return data.get("result", {}).get("message_id")
    except Exception as e:
        logger.exception(f"Telegram sendMessage exception: {e}")
        return None

async def tg_edit_message(chat_id: int, message_id: int, text: str) -> bool:
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/editMessageText"
    payload = {"chat_id": chat_id, "message_id": message_id, "text": text}
    try:
        tr = await http_client.post(url, json=payload)
        if tr.is_error:
            logger.error(f"Telegram editMessageText error {tr.status_code}: {tr.text[:300]}")
            return False
        return True
    except Exception as e:
        logger.exception(f"Telegram editMessageText exception: {e}")
        return False

async def tg_send_action(chat_id: int, action: str = "typing"):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendChatAction"
    payload = {"chat_id": chat_id, "action": action}
    try:
        await http_client.post(url, json=payload)
    except Exception:
        pass

# -------------------- TEXT UTILS ---------------------
_URL_RE = re.compile(r"(https?://[^\s<>')]+)", re.IGNORECASE)


# –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∫–æ—Ä—É—Ç–∏–Ω
def fire_and_forget(coro):
    try:
        asyncio.create_task(coro)
    except RuntimeError:
        asyncio.get_event_loop().create_task(coro)

async def handle_update_safe(update: dict):
    """–í—Å—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞. –õ—é–±—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≤–∏–º –≤–Ω—É—Ç—Ä–∏, —á—Ç–æ–±—ã –Ω–µ —Ä–æ–Ω—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å."""
    try:
        chat_id = None
        message = update.get("message") or update.get("edited_message") or update.get("callback_query", {}).get("message")
        if message:
            chat_id = message["chat"]["id"]
        # üëâ –∑–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–π —Å–≤–æ—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–æ–≤,
        # –Ω–∞–ø—Ä–∏–º–µ—Ä: await process_update(update)
        await process_update(update)  # <-- –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ, —á—Ç–æ —É–∂–µ –±—ã–ª–æ —É —Ç–µ–±—è
    except Exception:
        logger.exception("handle_update_safe error")

@app.post("/webhook/{path_secret}")
async def telegram_webhook(path_secret: str, request: Request, background_tasks: BackgroundTasks):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç –∏ –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–µ–º –±—ã—Å—Ç—Ä–æ
    if path_secret != WEBHOOK_SECRET:
        return JSONResponse({"ok": False, "error": "forbidden"}, status_code=403)

    try:
        update = await request.json()
    except Exception:
        # –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ‚Äî –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ 503
        logger.exception("Bad Telegram update payload")
        return JSONResponse({"ok": True})

    # —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –Ω–∞ —Ñ–æ–Ω (–æ—Ç–≤–µ—Ç 200 —É–π–¥–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ)
    background_tasks.add_task(handle_update_safe, update)
    return JSONResponse({"ok": True})  # üëà –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π 200

def extract_url_and_meta(text: str) -> Tuple[Optional[str], str]:
    text = (text or "").strip()
    if not text:
        return None, ""
    m = _URL_RE.search(text)
    if not m:
        return None, text
    url = m.group(1)
    meta = (text[:m.start()] + text[m.end():]).strip()
    return url, meta

def first_formatted_line(
    text: str,
    fallback_link: Optional[str] = None,
    fallback_meta: Optional[str] = None,
) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –∫ –≤–∏–¥—É: (URL 'META')
    """
    text = (text or "").strip()
    first = text.splitlines()[0].strip() if "\n" in text else text

    m_ok = re.match(r"^\((https?://[^\s'()]+)\s+'([^']+)'\)$", first)
    if m_ok:
        return first

    m_noparens = re.match(r"^(https?://[^\s'()]+)\s+'([^']+)'$", first)
    if m_noparens:
        url, quoted = m_noparens.group(1), m_noparens.group(2)
        return f"({url} '{quoted}')"

    m_url_only = re.search(r"(https?://[^\s'()]+)", first)
    if m_url_only and fallback_meta:
        url = m_url_only.group(1)
        meta = fallback_meta.strip()
        if meta:
            return f"({url} '{meta}')"

    if "–¢—Ä–µ–±—É–µ—Ç—Å—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫" in text:
        return "–¢—Ä–µ–±—É–µ—Ç—Å—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫"

    if fallback_link and fallback_meta:
        return f"({fallback_link.strip()} '{fallback_meta.strip()}')"

    return first or "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."

# -------------------- Z.AI CALL ---------------------
def _parse_retry_after(headers: httpx.Headers) -> float | None:
    ra = headers.get("Retry-After")
    if not ra:
        return None
    try:
        return float(ra)
    except ValueError:
        try:
            dt = datetime.strptime(ra, "%a, %d %b %Y %H:%M:%S %Z")
            return max(0.0, (dt - datetime.utcnow()).total_seconds())
        except Exception:
            return None

async def call_zai(messages: list) -> str:
    """
    –í—ã–∑–æ–≤ Z.AI —Å —Ä–µ—Ç—Ä–∞—è–º–∏, backoff, —É—á—ë—Ç–æ–º Retry-After –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞.
    """
    zai_url = "https://api.z.ai/api/paas/v4/chat/completions"
    api_key = Z_AI_API_KEY.strip().replace("\n", "").replace("\r", "")
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "Accept-Language": "en-US,en",
    }
    data = {
        "model": ZAI_MODEL,
        "messages": messages,
        "temperature": 0.2,
        "stream": False,
    }

    max_attempts = 4
    base_sleep = 1.5

    async with zai_semaphore:
        for attempt in range(1, max_attempts + 1):
            try:
                r = await http_client.post(zai_url, headers=headers, json=data)

                if r.status_code in (429, 502, 503, 504):
                    ra = _parse_retry_after(r.headers) or (base_sleep * attempt)
                    ra *= random.uniform(0.8, 1.2)
                    logger.warning(
                        f"Z.AI transient {r.status_code}; retry in ~{ra:.2f}s; body: {r.text[:300]}"
                    )
                    if attempt < max_attempts:
                        await asyncio.sleep(ra)
                        continue

                r.raise_for_status()

                payload = r.json()
                reply = (
                    payload.get("choices", [{}])[0]
                    .get("message", {})
                    .get("content", "")
                )
                reply = (reply or "").strip()
                return reply or "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."

            except httpx.ReadTimeout:
                if attempt < max_attempts:
                    ra = (base_sleep * (attempt + 1)) * random.uniform(0.8, 1.2)
                    logger.warning(f"Z.AI read timeout; retry in ~{ra:.2f}s")
                    await asyncio.sleep(ra)
                    continue
                return "–°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ."

            except httpx.HTTPStatusError as he:
                status = he.response.status_code if he.response else "?"
                body = he.response.text[:500] if he.response else ""
                logger.error(f"Z.AI HTTP {status}: {body}")
                return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω (HTTP {status}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."

            except (httpx.RequestError, ValueError) as re_err:
                logger.exception(f"Z.AI request/json error: {re_err}")
                if attempt < max_attempts:
                    ra = (base_sleep * attempt) * random.uniform(0.8, 1.2)
                    await asyncio.sleep(ra)
                    continue
                return "–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–æ–¥–µ–ª—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."

            except Exception as e:
                logger.exception(f"Unexpected error: {e}")
                return "–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è."

    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."


async def tg_delete_message(chat_id: int, message_id: int) -> bool:
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/deleteMessage"
    payload = {"chat_id": chat_id, "message_id": message_id}
    try:
        tr = await http_client.post(url, json=payload)
        if tr.is_error:
            logger.error(f"Telegram deleteMessage error {tr.status_code}: {tr.text[:300]}")
            return False
        return True
    except Exception as e:
        logger.exception(f"Telegram deleteMessage exception: {e}")
        return False

# -------------------- ROUTES ---------------------
@app.get("/")
def health():
    return {"ok": True, "safe_mode": SAFE_MODE, "concurrency": 1 if SAFE_MODE else ZAI_CONCURRENCY_LIMIT}

@app.post("/webhook/{path_secret}")
async def tg_webhook(request: Request, path_secret: str):
    if path_secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=401, detail="bad secret")

    update = await request.json()
    msg = update.get("message") or {}
    chat = msg.get("chat") or {}
    chat_id = chat.get("id")
    if not chat_id:
        return {"status": "ignored"}

    text = (msg.get("text") or msg.get("caption") or "").strip()
    if not text:
        return {"status": "ignored"}

    # –ê–Ω—Ç–∏-—Å–ø–∞–º –ø–æ —á–∞—Ç—É
    now = monotonic()
    last = LAST_HIT.get(chat_id, 0.0)
    if now - last < PER_CHAT_COOLDOWN:
        return {"status": "rate_limited"}
    LAST_HIT[chat_id] = now

    # ----- –ö–ù–û–ü–ö–ò-–£–ü–†–ê–í–õ–ï–ù–ò–Ø -----
    if text == BTN_CLEAR:
        sess = SESSIONS.get(chat_id)
        if sess and sess.get("mode") == "format_citation":
            sess["parts"] = {"link": None, "meta": ""}
            await tg_send_message(chat_id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É/–¥–∞–Ω–Ω—ã–µ.", reply_markup=menu_keyboard())
        else:
            await tg_send_message(chat_id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Ç–∞–∫ –ø—É—Å—Ç. –ù–∞–∂–º–∏—Ç–µ ¬´–û—Ñ–æ—Ä–º–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞¬ª.", reply_markup=menu_keyboard())
        return {"status": "ok"}

    if text == BTN_MENU:
        SESSIONS.pop(chat_id, None)
        await tg_send_message(chat_id, "–í—ã –≤ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard())
        return {"status": "ok"}

    if text == BTN_RESTART:
        SESSIONS.pop(chat_id, None)
        await tg_send_message(chat_id, "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫. –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n" + HELP_MSG, reply_markup=menu_keyboard())
        return {"status": "ok"}

    if text == BTN_FIX:
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç.
        _set_safe_mode(not SAFE_MODE)
        LAST_HIT.clear()
        await _reinit_http_client()
        state = "–≤–∫–ª—é—á—ë–Ω (–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å = 1)" if SAFE_MODE else f"–≤—ã–∫–ª—é—á–µ–Ω (–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å = {ZAI_CONCURRENCY_LIMIT})"
        await tg_send_message(chat_id, f"üõ† –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º {state}. –ö–ª–∏–µ–Ω—Ç —Å–µ—Ç–∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.", reply_markup=menu_keyboard())
        return {"status": "ok"}

    # ----- –ö–û–ú–ê–ù–î–´ -----
    if text.startswith("/start"):
        SESSIONS.pop(chat_id, None)
        await tg_send_message(
            chat_id,
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞.\n\n" + HELP_MSG,
            reply_markup=menu_keyboard(),
        )
        return {"status": "ok"}

    if text.startswith("/menu"):
        await tg_send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=menu_keyboard(),
        )
        return {"status": "ok"}

    if text.startswith("/cancel"):
        SESSIONS.pop(chat_id, None)
        await tg_send_message(chat_id, CANCEL_MSG, reply_markup=menu_keyboard())
        return {"status": "ok"}

    # ----- –ù–ê–ñ–ê–¢–ò–ï –û–°–ù–û–í–ù–û–ô –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ -----
    if text == MENU_BTN_FORMAT:
        SESSIONS[chat_id] = {"mode": "format_citation", "parts": {"link": None, "meta": ""}}
        await tg_send_message(
            chat_id,
            "–†–µ–∂–∏–º: *–û—Ñ–æ—Ä–º–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞*.\n\n" + PROMPT_ENTER_SOURCE,
            reply_markup=menu_keyboard(),
        )
        return {"status": "ok"}

    # ----- –†–ï–ñ–ò–ú –§–û–†–ú–ê–¢–¢–ï–†–ê –° –ö–û–ù–¢–ï–ö–°–¢–û–ú -----
    session = SESSIONS.get(chat_id) or {}
    if session.get("mode") == "format_citation":
        parts = session.setdefault("parts", {"link": None, "meta": ""})

        url_in, meta_in = extract_url_and_meta(text)
        if url_in:
            parts["link"] = url_in.strip()
        if meta_in:
            parts["meta"] = (parts["meta"] + "\n" + meta_in).strip() if parts["meta"] else meta_in

        if not parts["link"] and not parts["meta"]:
            await tg_send_message(chat_id, "–ù—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –∏ —Å—Å—ã–ª–∫–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –ª—é–±—É—é —á–∞—Å—Ç—å.", reply_markup=menu_keyboard())
            return {"status": "ok"}
        if not parts["link"]:
            await tg_send_message(chat_id, "–ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É (URL) –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫.", reply_markup=menu_keyboard())
            return {"status": "ok"}
        if not parts["meta"]:
            await tg_send_message(chat_id, "–°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏, –∏–∑–¥–∞–Ω–∏–µ, –≥–æ–¥ –∏ —Ç. –ø.", reply_markup=menu_keyboard())
            return {"status": "ok"}

        await tg_send_action(chat_id, "typing")
        placeholder_id = await tg_send_message(chat_id, "–û—Ñ–æ—Ä–º–ª—è—é‚Ä¶", reply_markup=menu_keyboard())

        user_payload = f"{parts['meta']}\n{parts['link']}".strip()
        messages = [
            {"role": "system", "content": SYSTEM_PROMPT_FORMATTER},
            {"role": "user", "content": user_payload},
        ]

        final_text = None
        error_text = None
        try:
            raw = await asyncio.wait_for(call_zai(messages), timeout=MODEL_WATCHDOG_SECONDS)
            formatted = first_formatted_line(
                raw,
                fallback_link=parts.get("link"),
                fallback_meta=parts.get("meta"),
            )
            if len(formatted) > 4096:
                formatted = formatted[:4090] + "‚Ä¶"
            final_text = formatted

        except asyncio.TimeoutError:
            error_text = "–°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.exception(f"format_citation pipeline error: {e}")
            error_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."

        out = final_text or error_text or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."
        if placeholder_id:
            ok = await tg_edit_message(chat_id, placeholder_id, out)
            if not ok:
                # –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ: —É–¥–∞–ª–∏–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∏ –ø—Ä–∏—à–ª—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–Ω–æ–≤–æ
                deleted = await tg_delete_message(chat_id, placeholder_id)
                await tg_send_message(chat_id, out, reply_markup=menu_keyboard())
        else:
            await tg_send_message(chat_id, out, reply_markup=menu_keyboard())

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω–Ω—ã–º, –Ω–æ –æ—á–∏—â–∞–µ–º —á–∞—Å—Ç–∏ ‚Äî –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –æ—Ñ–æ—Ä–º–ª—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–π
        SESSIONS[chat_id] = {"mode": "format_citation", "parts": {"link": None, "meta": ""}}
        return {"status": "sent"}

    # ----- –û–ë–´–ß–ù–´–ô –î–ò–ê–õ–û–ì -----
    await tg_send_action(chat_id, "typing")
    placeholder_id = await tg_send_message(chat_id, "–î—É–º–∞—é‚Ä¶", reply_markup=menu_keyboard())
    messages = [{"role": "user", "content": text}]

    final_text = None
    error_text = None
    try:
        raw = await asyncio.wait_for(call_zai(messages), timeout=MODEL_WATCHDOG_SECONDS)
        final_text = raw if raw else "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."
        if len(final_text) > 4096:
            final_text = final_text[:4090] + "‚Ä¶"
    except asyncio.TimeoutError:
        error_text = "–°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ."
    except Exception as e:
        logger.exception(f"chat pipeline error: {e}")
        error_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."

    out = final_text or error_text or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."
    if placeholder_id:
        ok = await tg_edit_message(chat_id, placeholder_id, out)
        if not ok:
            await tg_send_message(chat_id, out, reply_markup=menu_keyboard())
    else:
        await tg_send_message(chat_id, out, reply_markup=menu_keyboard())
    return {"status": "sent"}




