import os
import re
import asyncio
import logging
from typing import Optional, Dict, Any, List

import httpx
from fastapi import FastAPI, Request, BackgroundTasks
from fastapi.responses import JSONResponse, PlainTextResponse

# ------------------------
# –ö–æ–Ω—Ñ–∏–≥ / ENV
# ------------------------
logger = logging.getLogger("uvicorn.error")

def env_required(name: str) -> str:
    val = os.environ.get(name, "").strip()
    if not val:
        raise RuntimeError(f"Missing required environment variable: {name}")
    return val

TELEGRAM_TOKEN   = env_required("TELEGRAM_TOKEN")
Z_AI_API_KEY     = env_required("Z_AI_API_KEY")
WEBHOOK_SECRET   = os.environ.get("WEBHOOK_SECRET", "amagh743").strip()

Z_AI_MODEL       = os.environ.get("Z_AI_MODEL", "glm-4.5-Flash").strip()
ZAI_CONCURRENCY_LIMIT = int(os.environ.get("ZAI_CONCURRENCY_LIMIT", "2"))
PER_CHAT_COOLDOWN     = float(os.environ.get("PER_CHAT_COOLDOWN", "0.7"))
MODEL_WATCHDOG_SECONDS = int(os.environ.get("MODEL_WATCHDOG_SECONDS", "25"))

TELEGRAM_API_BASE = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
ZAI_URL = "https://api.z.ai/api/paas/v4/chat/completions"

# ------------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
# ------------------------
app = FastAPI()
http_client: Optional[httpx.AsyncClient] = None
zai_semaphore = asyncio.Semaphore(ZAI_CONCURRENCY_LIMIT)

# user state: {chat_id: {"mode": str, "parts": {"link": Optional[str], "meta": str}}}
SESSIONS: Dict[int, Dict[str, Any]] = {}

# –ê–Ω—Ç–∏-—Å–ø–∞–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
LAST_USED_AT: Dict[int, float] = {}

# ------------------------
# –¢–µ–∫—Å—Ç—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ------------------------
SYSTEM_PROMPT_FORMATTER = (
    "–¢—ã –æ—Ñ–æ—Ä–º–ª—è–µ—à—å –Ω–∞—É—á–Ω—ã–µ/–º–µ–¥–∏–π–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –í–ù–£–¢–†–ò –¢–ï–ö–°–¢–ê —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    "(<–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞> '<–ø–æ–ª–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏–∑–¥–∞–Ω–∏–µ/–∂—É—Ä–Ω–∞–ª, –≥–æ–¥, —Ç–æ–º/–Ω–æ–º–µ—Ä, —Å—Ç—Ä–∞–Ω–∏—Ü—ã, DOI –µ—Å–ª–∏ –µ—Å—Ç—å>')\n"
    "–¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ù–∏–∫–∞–∫–∏—Ö –∞–≤—Ç–æ—Ä–æ–≤ –≤ –Ω–∞—á–∞–ª–µ. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π."
)

def menu_keyboard() -> Dict[str, Any]:
    # tg reply_markup
    return {
        "keyboard": [
            [{"text": "üìö –û—Ñ–æ—Ä–º–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞"}],
            [{"text": "üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"}, {"text": "üè† –ú–µ–Ω—é"}],
            [{"text": "üõ† –ü–æ—á–∏–Ω–∏—Ç—å —Å–±–æ–∏"}, {"text": "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"}],
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False,
    }

WELCOME = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –≤–∏–¥–µ —Å—Å—ã–ª–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞.\n\n"
    "–ù–∞–∂–º–∏ ¬´üìö –û—Ñ–æ—Ä–º–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞¬ª, –∞ –∑–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏:\n"
    "‚Äî –ª–∏–±–æ –ø–æ–ª–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –° –ì–ò–ü–ï–†–°–°–´–õ–ö–û–ô,\n"
    "‚Äî –ª–∏–±–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏: —Å–Ω–∞—á–∞–ª–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ (–±–µ–∑ –∞–≤—Ç–æ—Ä–æ–≤ –≤ –Ω–∞—á–∞–ª–µ), –ø–æ—Ç–æ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É.\n"
    "–û—Ç–≤–µ—á–∞—é –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    "(https://—Å—Å—ã–ª–∫–∞ '–ù–∞–∑–≤–∞–Ω–∏–µ‚Ä¶ // –ñ—É—Ä–Ω–∞–ª ‚Äî –ì–æ–¥ ‚Äî –¢–æ–º, No. ‚Äî –°—Ç—Ä–∞–Ω–∏—Ü—ã ‚Äî DOI: ...')"
)

# ------------------------
# –£—Ç–∏–ª–∏—Ç—ã Telegram
# ------------------------
async def tg_call(method: str, payload: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    url = f"{TELEGRAM_API_BASE}/{method}"
    try:
        r = await http_client.post(url, json=payload, timeout=15)
        if r.status_code >= 400:
            logger.error(f"Telegram {method} error {r.status_code}: {r.text}")
        data = r.json()
        return data if data.get("ok") else None
    except Exception:
        logger.exception(f"Telegram call failed: {method}")
        return None

async def tg_send_message(chat_id: int, text: str, reply_markup: Optional[Dict[str, Any]] = None) -> Optional[int]:
    resp = await tg_call("sendMessage", {
        "chat_id": chat_id,
        "text": text,
        "reply_markup": reply_markup,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    })
    if resp and resp.get("result"):
        return resp["result"]["message_id"]
    return None

async def tg_edit_message(chat_id: int, message_id: int, text: str) -> bool:
    resp = await tg_call("editMessageText", {
        "chat_id": chat_id,
        "message_id": message_id,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True,
    })
    return bool(resp and resp.get("ok"))

async def tg_send_action(chat_id: int, action: str = "typing") -> None:
    await tg_call("sendChatAction", {"chat_id": chat_id, "action": action})

# ------------------------
# LLM: Z.AI
# ------------------------
async def call_zai(messages: List[Dict[str, str]]) -> str:
    headers = {
        "Authorization": f"Bearer {Z_AI_API_KEY}",
        "Content-Type": "application/json",
    }
    data = {
        "model": Z_AI_MODEL,
        "messages": messages,
        "temperature": 0.1,
        "stream": False,
    }

    max_attempts = 5
    for attempt in range(1, max_attempts + 1):
        async with zai_semaphore:
            try:
                r = await http_client.post(ZAI_URL, headers=headers, json=data, timeout=25)
                # —Ö–µ–Ω–¥–ª–∏–º –ø–µ—Ä–µ–≥—Ä—É–∑
                if r.status_code in (429, 502, 503, 504):
                    logger.warning(f"Z.AI transient {r.status_code}: {r.text[:200]}")
                    if attempt < max_attempts:
                        await asyncio.sleep(1.2 * attempt)
                        continue
                r.raise_for_status()
                payload = r.json()
                reply = (
                    payload.get("choices", [{}])[0]
                    .get("message", {})
                    .get("content", "")
                )
                return (reply or "").strip() or "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."
            except httpx.ReadTimeout:
                if attempt < max_attempts:
                    await asyncio.sleep(1.2 * attempt)
                    continue
                return "–°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            except httpx.HTTPStatusError as he:
                status = he.response.status_code if he.response else "?"
                body = he.response.text[:500] if he.response else ""
                logger.error(f"Z.AI HTTP {status}: {body}")
                return "–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."
            except Exception:
                logger.exception("Z.AI unexpected error")
                if attempt < max_attempts:
                    await asyncio.sleep(1.0 * attempt)
                    continue
                return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏."

async def call_llm(messages: List[Dict[str, str]]) -> str:
    # –ø—Ä–æ—Å—Ç–æ –æ–±—ë—Ä—Ç–∫–∞ ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ–ª–±—ç–∫-–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
    return await call_zai(messages)

# ------------------------
# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–∫–æ–±–∫–∏)
# ------------------------
LINK_RE = re.compile(r"https?://\S+", re.IGNORECASE)

def force_parenthesized(link: Optional[str], meta: Optional[str], model_text: str) -> str:
    """
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç: (link 'meta')
    1) –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ –≤–µ—Ä–Ω—É–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ —Å–∫–æ–±–∫–∞—Ö ‚Äî –≤–µ—Ä–Ω—ë–º –∫–∞–∫ –µ—Å—Ç—å;
    2) –∏–Ω–∞—á–µ —Å–æ–±–µ—Ä—ë–º —Å–∞–º–∏ –∏–∑ link+meta;
    3) –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤–Ω—É—Ç—Ä–∏ meta —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–∏–ø–æ–≥—Ä–∞—Ñ—Å–∫–∏–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–º.
    """
    txt = model_text.strip()
    if txt.startswith("(") and txt.endswith(")") and "'" in txt:
        return txt  # –≤—ã–≥–ª—è–¥–∏—Ç –æ–∫

    lnk = (link or "").strip()
    mt  = (meta or "").strip()

    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ —Å—Å—ã–ª–∫—É –∏ –∞–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã–¥—Ä–∞—Ç—å:
    found_link = LINK_RE.search(txt)
    if not lnk and found_link:
        lnk = found_link.group(0)

    if not mt:
        # –í—ã—Ä–µ–∑–∞–µ–º –∫–∞–≤—ã—á–∫–∞—Ö/–±–µ–∑ ‚Äî –±–µ—Ä—ë–º –≤—Å—ë –ø–æ—Å–ª–µ —Å—Å—ã–ª–∫–∏
        # –ù–æ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –≤–Ω—è—Ç–Ω–æ–≥–æ ‚Äî fallback –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
        mt = txt

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–≤—ã—á–∫–∏
    safe_meta = mt.replace("‚Äô", "'").replace("`", "'")
    safe_meta = safe_meta.replace("'", "‚Äô")  # –≤–Ω—É—Ç—Ä. –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã ‚Üí —Ç–∏–ø–æ–≥—Ä–∞—Ñ—Å–∫–∏–π
    if lnk:
        return f"({lnk} '{safe_meta}')"
    # –µ—Å–ª–∏ —Å—Å—ã–ª–∫—É —Ç–∞–∫ –∏ –Ω–µ –¥–æ—Å—Ç–∞–ª–∏ ‚Äî –ø—É—Å—Ç—å –º–æ–¥–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–æ –≤ —Å–∫–æ–±–∫–∞—Ö
    return f"({safe_meta})"

def first_formatted_line(model_text: str, fallback_link: Optional[str], fallback_meta: Optional[str]) -> str:
    out = force_parenthesized(fallback_link, fallback_meta, model_text)
    # –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
    out = out.replace("\r", " ").replace("\n", " ").strip()
    return out

# ------------------------
# –†–µ–∂–∏–º ¬´–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞¬ª
# ------------------------
def ensure_session(chat_id: int) -> Dict[str, Any]:
    s = SESSIONS.get(chat_id)
    if not s:
        s = {"mode": "menu", "parts": {"link": None, "meta": ""}}
        SESSIONS[chat_id] = s
    if "parts" not in s:
        s["parts"] = {"link": None, "meta": ""}
    return s

def is_link(text: str) -> bool:
    return bool(LINK_RE.search(text))

async def handle_formatter_message(chat_id: int, text: str) -> None:
    sess = ensure_session(chat_id)
    parts = sess["parts"]
    txt = text.strip()

    if is_link(txt):
        parts["link"] = LINK_RE.search(txt).group(0)
    else:
        # –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º ¬´–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ¬ª –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if parts["meta"]:
            parts["meta"] = (parts["meta"] + " " + txt).strip()
        else:
            parts["meta"] = txt

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö
    if parts.get("link") and parts.get("meta"):
        # —Å—Ç–∞–≤–∏–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∏ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        await tg_send_action(chat_id, "typing")
        placeholder_id = await tg_send_message(chat_id, "–û—Ñ–æ—Ä–º–ª—è—é‚Ä¶", reply_markup=menu_keyboard())
        fire_and_forget(_format_worker(chat_id, parts.copy(), placeholder_id))
    else:
        # –ø—Ä–æ—Å–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ
        if not parts.get("link"):
            await tg_send_message(chat_id, "–ü—Ä–∏—à–ª–∏—Ç–µ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http/https).", reply_markup=menu_keyboard())
        elif not parts.get("meta"):
            await tg_send_message(chat_id, "–ü—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∂—É—Ä–Ω–∞–ª/–º–µ—Å—Ç–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –≥–æ–¥, —Ç–æ–º/–Ω–æ–º–µ—Ä, —Å—Ç—Ä–∞–Ω–∏—Ü—ã, DOI).", reply_markup=menu_keyboard())

async def _format_worker(chat_id: int, parts: Dict[str, Any], placeholder_id: Optional[int]) -> None:
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –≤—ã–∑—ã–≤–∞–µ—Ç LLM –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä.
    """
    user_payload = f"{parts.get('meta','')}\n{parts.get('link','')}".strip()
    messages = [
        {"role": "system", "content": SYSTEM_PROMPT_FORMATTER},
        {"role": "user", "content": user_payload},
    ]

    try:
        raw = await asyncio.wait_for(call_llm(messages), timeout=MODEL_WATCHDOG_SECONDS)
        formatted = first_formatted_line(raw, fallback_link=parts.get("link"), fallback_meta=parts.get("meta"))
        if len(formatted) > 4096:
            formatted = formatted[:4090] + "‚Ä¶"
        out = formatted
    except asyncio.TimeoutError:
        out = "–°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
    except Exception:
        logger.exception("format_worker error")
        out = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."

    if placeholder_id:
        ok = await tg_edit_message(chat_id, placeholder_id, out)
        if not ok:
            await tg_send_message(chat_id, out, reply_markup=menu_keyboard())
    else:
        await tg_send_message(chat_id, out, reply_markup=menu_keyboard())

    # –æ—á–∏—â–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–µ —á–∞—Å—Ç–∏, –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    SESSIONS[chat_id] = {"mode": "format_citation", "parts": {"link": None, "meta": ""}}

# ------------------------
# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏: ¬´fire and forget¬ª
# ------------------------
def fire_and_forget(coro):
    try:
        asyncio.create_task(coro)
    except RuntimeError:
        asyncio.get_event_loop().create_task(coro)

# ------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ø–¥–µ–π—Ç–æ–≤ Telegram (–≤ —Ñ–æ–Ω–µ)
# ------------------------
async def process_update(update: Dict[str, Any]) -> None:
    """
    –í—Å—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞ (—Å–æ–æ–±—â–µ–Ω–∏—è/–∫–Ω–æ–ø–∫–∏).
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –≤–µ–±—Ö—É–∫ —Å—Ä–∞–∑—É –æ—Ç–¥–∞–≤–∞–ª 200.
    """
    try:
        msg = update.get("message") or update.get("edited_message")
        cb  = update.get("callback_query")

        if cb:
            message = cb.get("message")
            if not message:
                return
            chat_id = message["chat"]["id"]
            data = (cb.get("data") or "").strip()
            if data == "menu":
                SESSIONS[chat_id] = {"mode": "menu", "parts": {"link": None, "meta": ""}}
                await tg_send_message(chat_id, "–ú–µ–Ω—é:", reply_markup=menu_keyboard())
            return

        if not msg:
            return

        chat_id = msg["chat"]["id"]
        text = (msg.get("text") or "").strip()

        # –ø—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
        now = asyncio.get_event_loop().time()
        last = LAST_USED_AT.get(chat_id, 0.0)
        if now - last < PER_CHAT_COOLDOWN:
            return
        LAST_USED_AT[chat_id] = now

        sess = ensure_session(chat_id)
        mode = sess.get("mode", "menu")

        # —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        if text in ("üè† –ú–µ–Ω—é", "/start", "start", "/menu"):
            SESSIONS[chat_id] = {"mode": "menu", "parts": {"link": None, "meta": ""}}
            await tg_send_message(chat_id, WELCOME, reply_markup=menu_keyboard())
            return

        if text == "üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç":
            SESSIONS[chat_id] = {"mode": mode, "parts": {"link": None, "meta": ""}}
            await tg_send_message(chat_id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ.", reply_markup=menu_keyboard())
            return

        if text == "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫":
            SESSIONS[chat_id] = {"mode": "menu", "parts": {"link": None, "meta": ""}}
            await tg_send_message(chat_id, "–°–µ—Å—Å–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ¬´üìö –û—Ñ–æ—Ä–º–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞¬ª.", reply_markup=menu_keyboard())
            return

        if text == "üõ† –ü–æ—á–∏–Ω–∏—Ç—å —Å–±–æ–∏":
            await tg_send_message(chat_id, "–ï—Å–ª–∏ –¥–æ–ª–≥–æ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.\n–ú—ã –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã Telegram –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–ª 200.", reply_markup=menu_keyboard())
            return

        if text == "üìö –û—Ñ–æ—Ä–º–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞":
            SESSIONS[chat_id] = {"mode": "format_citation", "parts": {"link": None, "meta": ""}}
            await tg_send_message(chat_id, "–†–µ–∂–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á—ë–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ (–Ω–∞–∑–≤–∞–Ω–∏–µ/–∂—É—Ä–Ω–∞–ª/–≥–æ–¥/—Ç–æ–º/—Å—Ç—Ä/DOI) –∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É. –ú–æ–∂–Ω–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏.", reply_markup=menu_keyboard())
            return

        # —Ä–µ–∂–∏–º—ã
        if mode == "format_citation":
            await handle_formatter_message(chat_id, text)
            return

        # –¥–µ—Ñ–æ–ª—Ç ‚Äî –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
        await tg_send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard())

    except Exception:
        logger.exception("process_update fatal error")

# ------------------------
# Webhook: –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π 200 + —Ñ–æ–Ω
# ------------------------
@app.post("/webhook/{path_secret}")
async def telegram_webhook(path_secret: str, request: Request, background_tasks: BackgroundTasks):
    if path_secret != WEBHOOK_SECRET:
        return JSONResponse({"ok": False, "error": "forbidden"}, status_code=403)

    try:
        update = await request.json()
    except Exception:
        logger.exception("Bad Telegram update payload")
        return JSONResponse({"ok": True})  # –æ—Ç–≤–µ—á–∞–µ–º 200, —á—Ç–æ–±—ã –Ω–µ –∫–æ–ø–∏—Ç—å 503

    # —Å—Ç–∞–≤–∏–º –≤ —Ñ–æ–Ω, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –≤–µ—Ä–Ω—É—Ç—å 200
    background_tasks.add_task(process_update, update)
    return JSONResponse({"ok": True})

# GET –Ω–∞ –≤–µ–±—Ö—É–∫ ‚Äî –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
@app.get("/webhook/{path_secret}")
async def webhook_get(path_secret: str):
    return JSONResponse({"ok": path_secret == WEBHOOK_SECRET})

# ------------------------
# Health / Root
# ------------------------
@app.get("/")
def root():
    return {
        "ok": True,
        "service": "edsource-bot",
        "model": Z_AI_MODEL,
        "concurrency_limit": ZAI_CONCURRENCY_LIMIT,
    }

@app.get("/healthz")
def healthz():
    return {"ok": True, "status": "up"}

# ------------------------
# Lifecycle
# ------------------------
@app.on_event("startup")
async def on_startup():
    global http_client
    http_client = httpx.AsyncClient(timeout=None)
    logger.info("HTTP client ready.")

@app.on_event("shutdown")
async def on_shutdown():
    global http_client
    if http_client:
        try:
            await http_client.aclose()
        except Exception:
            pass
    logger.info("HTTP client closed.")
