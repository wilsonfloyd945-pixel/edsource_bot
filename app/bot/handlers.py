import asyncio
from typing import Optional, Dict, Any
from .sessions import SESSIONS, LAST_USED_AT, ensure_session
from .formatting import LINK_RE, first_formatted_line
from .ui import SYSTEM_PROMPT_FORMATTER, menu_keyboard, WELCOME
from ..services.telegram_service import tg_send_message, tg_edit_message, tg_send_action
from ..services.zai_service import call_llm
from ..config.settings import PER_CHAT_COOLDOWN, MODEL_WATCHDOG_SECONDS

def fire_and_forget(coro):
    try:
        asyncio.create_task(coro)
    except RuntimeError:
        asyncio.get_event_loop().create_task(coro)

async def handle_formatter_message(chat_id: int, text: str) -> None:
    sess = ensure_session(chat_id)
    parts = sess["parts"]
    txt = (text or "").strip()

    urls = LINK_RE.findall(txt)
    if urls:
        if not parts.get("link"):
            parts["link"] = urls[0]
        meta_candidate = LINK_RE.sub("", txt).strip()
        if meta_candidate:
            if parts.get("meta"):
                parts["meta"] = (parts["meta"] + " " + meta_candidate).strip()
            else:
                parts["meta"] = meta_candidate
    else:
        if parts.get("meta"):
            parts["meta"] = (parts["meta"] + " " + txt).strip()
        else:
            parts["meta"] = txt

    if parts.get("link") and parts.get("meta"):
        await tg_send_action(chat_id, "typing")
        placeholder_id = await tg_send_message(chat_id, "–û—Ñ–æ—Ä–º–ª—è—é‚Ä¶", reply_markup=menu_keyboard())
        fire_and_forget(_format_worker(chat_id, parts.copy(), placeholder_id))
    else:
        if not parts.get("link"):
            await tg_send_message(chat_id, "–ü—Ä–∏—à–ª–∏—Ç–µ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http/https).", reply_markup=menu_keyboard())
        elif not parts.get("meta"):
            await tg_send_message(chat_id, "–ü—Ä–∏—à–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∂—É—Ä–Ω–∞–ª/–º–µ—Å—Ç–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –≥–æ–¥, —Ç–æ–º/–Ω–æ–º–µ—Ä, —Å—Ç—Ä–∞–Ω–∏—Ü—ã, DOI).", reply_markup=menu_keyboard())

async def _format_worker(chat_id: int, parts: Dict[str, Any], placeholder_id: Optional[int]) -> None:
    user_payload = f"{parts.get('meta','')}\n{parts.get('link','')}".strip()
    messages = [
        {"role": "system", "content": SYSTEM_PROMPT_FORMATTER},
        {"role": "user", "content": user_payload},
    ]
    try:
        raw = await asyncio.wait_for(call_llm(messages), timeout=MODEL_WATCHDOG_SECONDS)
        formatted = first_formatted_line(raw, fallback_link=parts.get("link"), fallback_meta=parts.get("meta"))
        if len(formatted) > 4096:
            formatted = formatted[:4090] + "‚Ä¶"
        out = formatted
    except asyncio.TimeoutError:
        out = "–°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
    except Exception:
        out = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."

    if placeholder_id:
        ok = await tg_edit_message(chat_id, placeholder_id, out)
        if not ok:
            await tg_send_message(chat_id, out, reply_markup=menu_keyboard())
    else:
        await tg_send_message(chat_id, out, reply_markup=menu_keyboard())

    SESSIONS[chat_id] = {"mode": "format_citation", "parts": {"link": None, "meta": ""}}

async def process_update(update: Dict[str, Any]) -> None:
    try:
        msg = update.get("message") or update.get("edited_message")
        cb  = update.get("callback_query")

        if cb:
            message = cb.get("message")
            if not message:
                return
            chat_id = message["chat"]["id"]
            data = (cb.get("data") or "").strip()
            if data == "menu":
                SESSIONS[chat_id] = {"mode": "menu", "parts": {"link": None, "meta": ""}}
                await tg_send_message(chat_id, "–ú–µ–Ω—é:", reply_markup=menu_keyboard())
            return

        if not msg:
            return

        chat_id = msg["chat"]["id"]
        text = (msg.get("text") or "").strip()

        now = asyncio.get_event_loop().time()
        last = LAST_USED_AT.get(chat_id, 0.0)
        if now - last < PER_CHAT_COOLDOWN:
            return
        LAST_USED_AT[chat_id] = now

        sess = ensure_session(chat_id)
        mode = sess.get("mode", "menu")

        if text in ("üè† –ú–µ–Ω—é", "/start", "start", "/menu"):
            SESSIONS[chat_id] = {"mode": "menu", "parts": {"link": None, "meta": ""}}
            await tg_send_message(chat_id, WELCOME, reply_markup=menu_keyboard())
            return

        if text == "üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç":
            SESSIONS[chat_id] = {"mode": mode, "parts": {"link": None, "meta": ""}}
            await tg_send_message(chat_id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ.", reply_markup=menu_keyboard())
            return

        if text == "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫":
            SESSIONS[chat_id] = {"mode": "menu", "parts": {"link": None, "meta": ""}}
            await tg_send_message(chat_id, "–°–µ—Å—Å–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ¬´üìö –û—Ñ–æ—Ä–º–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞¬ª.", reply_markup=menu_keyboard())
            return

        if text == "üõ† –ü–æ—á–∏–Ω–∏—Ç—å —Å–±–æ–∏":
            await tg_send_message(chat_id, "–ï—Å–ª–∏ –¥–æ–ª–≥–æ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.\n–ú—ã –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã Telegram –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–ª 200.", reply_markup=menu_keyboard())
            return

        if text == "üìö –û—Ñ–æ—Ä–º–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞":
            SESSIONS[chat_id] = {"mode": "format_citation", "parts": {"link": None, "meta": ""}}
            await tg_send_message(chat_id, "–†–µ–∂–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á—ë–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ (–Ω–∞–∑–≤–∞–Ω–∏–µ/–∂—É—Ä–Ω–∞–ª/–≥–æ–¥/—Ç–æ–º/—Å—Ç—Ä/DOI) –∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É. –ú–æ–∂–Ω–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏.", reply_markup=menu_keyboard())
            return

        if mode == "format_citation":
            await handle_formatter_message(chat_id, text)
            return

        await tg_send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard())

    except Exception:
        return
