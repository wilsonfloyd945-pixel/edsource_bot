from typing import Any, Dict
from .sessions import ensure_session, SESSIONS
from .rate_limit import allow
from .commands import cmd_start, cmd_menu, cmd_clear, cmd_restart, cmd_fix
from .modes import format_citation
from .callbacks import handle_callback
from .ui import model_keyboard
from ..services.telegram_service import tg_send_message, tg_edit_message


async def route_update(update: Dict[str, Any]) -> None:
    """
    –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞:
    - —Ä–∞–∑–±–∏—Ä–∞–µ–º message vs callback
    - –ø—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
    - —Ä–æ—É—Ç–∏–º –ø–æ —Ä–µ–∂–∏–º–∞–º –∏ –∫–æ–º–∞–Ω–¥–∞–º
    """
    # 1) callback_query
    cb = update.get("callback_query")
    if cb:
        message = cb.get("message")
        if not message:
            return
        chat_id = message["chat"]["id"]
        data = (cb.get("data") or "").strip()

        # --- –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ ---
        if data.startswith("model:"):
            choice = data.split(":", 1)[1]
            sess = ensure_session(chat_id)

            if choice == "help":
                text = (
                    "‚Ä¢ ‚ö° LLaMA 3.1 8B (Amvera) ‚Äî –±—ã—Å—Ç—Ä–µ–µ, —Ö–≤–∞—Ç–∞–µ—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
                    "‚Ä¢ DeepSeek ‚Äî –±—ã—Å—Ç—Ä—ã–π, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –ø–ª–∞–≤–∞—Ç—å.\n"
                    "‚Ä¢ ZAI ‚Äî –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä.\n\n"
                    "–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:"
                )
                await tg_edit_message(chat_id, message["message_id"], text)
                await tg_send_message(chat_id, "–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:", reply_markup=model_keyboard())
                return

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ø—Ä—è–º–æ –≤ —Å–µ—Å—Å–∏–∏
            sess["llm"] = choice  # 'amvera' | 'deepseek' | 'zai'
            SESSIONS[chat_id] = sess

            confirm = {
                "amvera": "‚úÖ –í—ã–±—Ä–∞–Ω–∞ LLaMA 3.1 8B (Amvera).",
                "deepseek": "‚úÖ –í—ã–±—Ä–∞–Ω DeepSeek.",
                "zai": "‚úÖ –í—ã–±—Ä–∞–Ω ZAI.",
            }.get(choice, f"‚úÖ –ú–æ–¥–µ–ª—å: {choice}")

            await tg_edit_message(chat_id, message["message_id"], confirm)
            await format_citation.enter_mode(chat_id)
            return

        # –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–ª–±–µ–∫–∏
        await handle_callback(chat_id, data)
        return

    # 2) –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = update.get("message") or update.get("edited_message")
    if not msg:
        return

    chat_id = msg["chat"]["id"]
    text = (msg.get("text") or "").strip()

    # –∞–Ω—Ç–∏—Å–ø–∞–º
    if not allow(chat_id):
        return

    # —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if text in ("üè† –ú–µ–Ω—é", "/start", "start", "/menu"):
        await cmd_start(chat_id)
        return
    if text == "üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç":
        await cmd_clear(chat_id)
        return
    if text == "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫":
        await cmd_restart(chat_id)
        return
    if text == "üõ† –ü–æ—á–∏–Ω–∏—Ç—å —Å–±–æ–∏":
        await cmd_fix(chat_id)
        return
    if text in ("/model", "–°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", "–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å"):
        await tg_send_message(chat_id, "–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:", reply_markup=model_keyboard())
        return
    if text == "üìö –û—Ñ–æ—Ä–º–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞":
        await format_citation.enter_mode(chat_id)
        return

    # —Ä–µ–∂–∏–º—ã
    sess = ensure_session(chat_id)
    mode = sess.get("mode", "menu")
    if mode == "format_citation":
        await format_citation.handle_message(chat_id, text)
        return

    # –¥–µ—Ñ–æ–ª—Ç
    await cmd_menu(chat_id)
